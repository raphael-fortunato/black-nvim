*black.txt*                                           Format your code using Black

--------------------------------------------------------------------------------
INTRODUCTION                                                  *black-introduction*

black-nvim formats your Python buffer asynchronously using Black
(https://github.com/psf/black). Its interface is simple: it defines a function,
|Black()|, that formats the entire buffer.

--------------------------------------------------------------------------------
USAGE                                                                *black-usage*

You can set *Black()* to a command, key mapping, or just call it directly.
For example, you can put the following commands in after/ftplugin/python.vim to
make CTRL-Q format the buffer:
>
    nnoremap <buffer><silent> <c-q> <cmd>call Black()<cr>
    inoremap <buffer><silent> <c-q> <cmd>call Black()<cr>
<

You can also use *BlackSync()* to format your buffer synchronously. This can
be used in the |BufWritePre| autocmd to format your buffer on save.

--------------------------------------------------------------------------------
CONFIGURATION                                                *black-configuration*

Use *g:black#settings*
For example:
>
    let g:black#settings = {
        \ 'fast': 1,
        \ 'line_length': 100,
        \ 'target_version': 'py310'
    \}
<
* `fast` (default: 0)
  Set to a non-zero number to skip the AST check. This makes formatting a lot
  faster.
* `line_length` (default: 88)
  Set to an integer to tell Black where to wrap lines.
* `target_version` (default: '')
  Sets the `--target-version` flag in the commandline. Useful if you use the new match
  syntax, as Black can only handle it when you set the version to 3.10 or above.

vim:ft=help:tw=80:ts=4:et:
